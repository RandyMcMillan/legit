name: act.yml

on:
  push:
    #paths:
    #  - '.github/workflows/automate.yml'
    schedule:
      - cron: "*/3 * * * *"

    branches:       #[ master ]
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - 'master'    # includes master
      - 'main'      # includes main

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  github-workspace:
    name: github-workspace
    runs-on: ubuntu-latest
    steps:
      - name: Print github workspace
        run: |
          printenv

# Setup ubuntu cross compile first
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            type -P brew && brew install node
            ~/.cargo/registry
            ./target
          key: test-cargo-registry
      - name: List
        run: find ./
      - name: Run tests
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          sudo apt-get update -y
          sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          source "$HOME/.cargo/env" && rustup default stable
          source "$HOME/.cargo/env" && cargo test --verbose

      - uses: actions/checkout@v3
      - name: cargo b
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          source "$HOME/.cargo/env" && rustup default stable
          source "$HOME/.cargo/env" && cargo b
          #source "$HOME/.cargo/env" && cargo install  --path .
      - name: cargo run -h
        run: |
          source "$HOME/.cargo/env" && cargo run -h


  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-gnu # tested on aws t4g.nano
            OS: ubuntu-latest
          - TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
            OS: ubuntu-latest
          - TARGET: armv7-unknown-linux-gnueabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
          - TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
          - TARGET: arm-unknown-linux-gnueabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
          - TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
          #- TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
          #  OS: macos-latest
          #- TARGET: x86_64-pc-windows-msvc # tested on a windows machine
          #  OS: windows-latest
    needs: setup
    runs-on: ${{ matrix.OS }}
    env:
      NAME: rust-cross-compile-example # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v3
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: List
        run: find ./

      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
          fi

          if [[ $OS =~ ^macos.*$ ]]; then
            brew install rustup-init
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          fi









      - name: git config
        if: ${{ !env.ACT }}
        run: |
          sudo git config user.name $GITHUB_REPOSITORY_OWNER
          sudo git config user.email $GITHUB_REPOSITORY_OWNER@test-email.com







      - name: touch-time test
        if: ${{ !env.ACT }}
        run: |
          sudo git config user.name $GITHUB_REPOSITORY_OWNER
          sudo git config user.email $GITHUB_REPOSITORY_OWNER@test-email.com
          sudo make touch-time git-add
          sudo git diff
          sudo make git-add
          sudo git diff
          sudo cargo run . -p 000 -m "touch-time test"
      - name: cargo run . -p 0 -m $(date +%s)
        if: ${{ !env.ACT }}
        run: |
          sudo make touch-time
          sudo git diff
          sudo make git-add
          sudo cargo run . -p 0 -m $(date +%s)
          sudo make touch-time
          sudo git diff
          sudo make git-add
          sudo cargo run . -p 00 -m $(date +%s)
          sudo make touch-time
          sudo git diff
          sudo make git-add
          sudo cargo run . -p 000 -m $(date +%s)
          sudo make touch-time
          sudo git diff
          sudo make git-add
          sudo cargo run . -p 0000 -m $(date +%s)
      - name: git log
        if: ${{ !env.ACT }}
        run: |
          git log
